#!/bin/bash

# Script de prÃ©paration pour publication GitHub
# Usage: ./scripts/prepare-release.sh

set -e

echo "ðŸš€ PrÃ©paration de OptimXmlPreview pour publication GitHub..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

error() {
    echo -e "${RED}âœ—${NC} $1"
    exit 1
}

# VÃ©rifications prÃ©liminaires
info "VÃ©rification de l'environnement..."

# VÃ©rifier Node.js
if ! command -v node &> /dev/null; then
    error "Node.js n'est pas installÃ©"
fi

NODE_VERSION=$(node --version)
success "Node.js ${NODE_VERSION} dÃ©tectÃ©"

# VÃ©rifier npm
if ! command -v npm &> /dev/null; then
    error "npm n'est pas installÃ©"
fi

NPM_VERSION=$(npm --version)
success "npm ${NPM_VERSION} dÃ©tectÃ©"

# VÃ©rifier git
if ! command -v git &> /dev/null; then
    error "Git n'est pas installÃ©"
fi

success "Git dÃ©tectÃ©"

# VÃ©rifier que nous sommes dans le bon rÃ©pertoire
if [ ! -f "package.json" ]; then
    error "Ce script doit Ãªtre exÃ©cutÃ© depuis la racine du projet"
fi

success "RÃ©pertoire du projet validÃ©"

# Nettoyer les fichiers temporaires
info "Nettoyage des fichiers temporaires..."
rm -rf node_modules/.cache
rm -rf dist/
rm -rf coverage/
rm -rf docs/
rm -f Output/*.html
success "Nettoyage terminÃ©"

# Installation des dÃ©pendances
info "Installation des dÃ©pendances..."
npm ci
success "DÃ©pendances installÃ©es"

# VÃ©rification du code
info "VÃ©rification du code avec ESLint..."
npm run lint
success "Code validÃ© par ESLint"

# Formatage du code
info "Formatage du code avec Prettier..."
npm run format
success "Code formatÃ©"

# Tests
info "ExÃ©cution des tests..."
npm test
success "Tests passÃ©s"

# Build
info "Build du projet..."
if npm run build 2>/dev/null; then
    success "Build rÃ©alisÃ©"
else
    warning "Pas de script de build dÃ©fini"
fi

# GÃ©nÃ©ration de la documentation
info "GÃ©nÃ©ration de la documentation..."
if npm run docs 2>/dev/null; then
    success "Documentation gÃ©nÃ©rÃ©e"
else
    warning "Pas de script de documentation dÃ©fini"
fi

# VÃ©rification des fichiers requis
info "VÃ©rification des fichiers requis..."

required_files=(
    "LICENSE"
    "README.md" 
    "CONTRIBUTING.md"
    "CHANGELOG.md"
    "package.json"
    "ConvertXmlToHtml.js"
    "UpdateIndex.js"
    "index.html"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        success "$file trouvÃ©"
    else
        error "$file manquant"
    fi
done

# VÃ©rification des rÃ©pertoires
info "VÃ©rification des rÃ©pertoires..."

required_dirs=(
    "Data"
    "img"
    ".github"
)

for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        success "RÃ©pertoire $dir trouvÃ©"
    else
        warning "RÃ©pertoire $dir manquant (sera crÃ©Ã©)"
        mkdir -p "$dir"
    fi
done

# VÃ©rification du package.json
info "VÃ©rification du package.json..."

# VÃ©rifier les champs requis
required_fields=("name" "version" "description" "license" "repository" "author")
for field in "${required_fields[@]}"; do
    if node -p "require('./package.json').$field" &>/dev/null; then
        success "Champ $field prÃ©sent"
    else
        error "Champ $field manquant dans package.json"
    fi
done

# VÃ©rification de la licence MIT
if grep -q "MIT" LICENSE; then
    success "Licence MIT confirmÃ©e"
else
    error "Licence MIT non trouvÃ©e dans LICENSE"
fi

# VÃ©rifier les URLs GitHub
info "VÃ©rification des URLs GitHub..."
if grep -q "votre-username" package.json README.md; then
    warning "URLs GitHub gÃ©nÃ©riques dÃ©tectÃ©es - pensez Ã  les remplacer par votre username"
else
    success "URLs GitHub configurÃ©es"
fi

# CrÃ©er un fichier .gitignore optimisÃ© si nÃ©cessaire
if [ ! -f ".gitignore" ]; then
    warning "Pas de .gitignore trouvÃ©, crÃ©ation d'un fichier par dÃ©faut"
    cat > .gitignore << EOF
# DÃ©pendances
node_modules/
npm-debug.log*

# Fichiers de sortie
Output/*.html
dist/
coverage/

# Fichiers temporaires
*.tmp
.DS_Store
Thumbs.db

# Logs
*.log

# Configuration locale
.env
.env.local
EOF
    success ".gitignore crÃ©Ã©"
fi

# RÃ©capitulatif
echo
echo "ðŸ“‹ RÃ©capitulatif de la prÃ©paration :"
echo "================================="
echo "âœ… Code formatÃ© et validÃ©"
echo "âœ… Tests passÃ©s"
echo "âœ… Documentation Ã  jour"
echo "âœ… Fichiers requis prÃ©sents"
echo "âœ… Licence MIT configurÃ©e"
echo
echo "ðŸŽ¯ Prochaines Ã©tapes pour GitHub :"
echo "================================="
echo "1. CrÃ©er un nouveau repository sur GitHub"
echo "2. Remplacer 'votre-username' par votre username GitHub dans :"
echo "   - package.json"
echo "   - README.md"
echo "   - CONTRIBUTING.md"
echo "3. Initialiser git et pousser le code :"
echo "   git init"
echo "   git add ."
echo "   git commit -m 'feat: initial commit'"
echo "   git branch -M main"
echo "   git remote add origin https://github.com/VOTRE-USERNAME/OptimXmlPreview.git"
echo "   git push -u origin main"
echo "4. Configurer les secrets GitHub pour CI/CD"
echo "5. Publier sur npm (optionnel) :"
echo "   npm publish"
echo

success "âœ¨ OptimXmlPreview est prÃªt pour la publication ! ðŸš€" 